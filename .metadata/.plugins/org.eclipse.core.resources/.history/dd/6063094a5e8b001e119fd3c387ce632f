package gui;

import java.awt.EventQueue;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

import dao.LopDAO;
import model.Lop;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class formLop extends JFrame {

	private JPanel contentPane;
	private JTextField txtMaLop;
	private JTextField txtTenLop;
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_1;
	private JButton btnThem;
	private JButton btnSua;
	private JButton btnXoa;
	private JScrollPane scrollPane;
	private JTable table;
	
	DefaultTableModel model = new DefaultTableModel();
	List<Lop> dsLop = new ArrayList<Lop>();
	LopDAO dao = new LopDAO();
	

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					formLop frame = new formLop();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public formLop() {
		initGUI();
		table.setModel(model);
		model.addColumn("Mã Lớp");
		model.addColumn("Tên Lớp");
		//
		dsLop = dao.findALL();
		for(Lop l:dsLop)
		{
			Object[] o = {l.getMalop(),l.getTenlop()};
			model.addRow(o);
		}
		//
	}
	private void initGUI() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 441, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		contentPane.add(getTxtMaLop());
		contentPane.add(getTxtTenLop());
		contentPane.add(getLblNewLabel());
		contentPane.add(getLblNewLabel_1());
		contentPane.add(getBtnThem());
		contentPane.add(getBtnSua());
		contentPane.add(getBtnXoa());
		contentPane.add(getScrollPane());
	}
	private JTextField getTxtMaLop() {
		if (txtMaLop == null) {
			txtMaLop = new JTextField();
			txtMaLop.setBounds(88, 13, 307, 22);
			txtMaLop.setColumns(10);
		}
		return txtMaLop;
	}
	private JTextField getTxtTenLop() {
		if (txtTenLop == null) {
			txtTenLop = new JTextField();
			txtTenLop.setBounds(88, 56, 307, 22);
			txtTenLop.setColumns(10);
		}
		return txtTenLop;
	}
	private JLabel getLblNewLabel() {
		if (lblNewLabel == null) {
			lblNewLabel = new JLabel("M\u00E3 L\u1EDBp");
			lblNewLabel.setBounds(20, 16, 56, 16);
		}
		return lblNewLabel;
	}
	private JLabel getLblNewLabel_1() {
		if (lblNewLabel_1 == null) {
			lblNewLabel_1 = new JLabel("T\u00EAn L\u1EDBp");
			lblNewLabel_1.setBounds(20, 59, 56, 16);
		}
		return lblNewLabel_1;
	}
	private JButton getBtnThem() {
		if (btnThem == null) {
			btnThem = new JButton("Th\u00EAm");
			btnThem.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					try {
						int maLop = Integer.parseInt(txtMaLop.getText());
						String tenLop = txtTenLop.getText();
						Lop lop = new Lop(maLop);
						lop.setTenlop(tenLop);
						if(dao.add(lop))
						{
							dsLop.add(lop);
							Object[] o = {lop.getMalop(),lop.getTenlop()};
							model.addRow(o);
							JOptionPane.showMessageDialog(null, "Thêm thành công!!!");
						}
						else
						{
							JOptionPane.showMessageDialog(null, "Mã lớp đã tồn tại!!!");
						}
					}
					catch (Exception e) {
						JOptionPane.showMessageDialog(null, "Vui lòng nhập Mã Lớp hợp lệ!!!");
					}
				}
			});
			btnThem.setBounds(20, 91, 97, 25);
		}
		return btnThem;
	}
	private JButton getBtnSua() {
		if (btnSua == null) {
			btnSua = new JButton("S\u1EEDa");
			btnSua.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					int index = table.getSelectedRow();
					if(index!=-1)
					{
						Lop lop = new Lop(dsLop.get(index).getMalop());
						//Lop lop = dsLop.get(index);
						lop.setTenlop(txtTenLop.getText());
						for(Lop l:dsLop)
						{
							if(l.getTenlop().compareTo(lop.getTenlop())==0)
							{
								JOptionPane.showMessageDialog(null, "Tên lớp trùng không thể sửa!!!");
								return;
							}
						}
						try
						{
							if(lop.getMalop()!=Integer.parseInt(txtMaLop.getText()))
							{
								JOptionPane.showMessageDialog(null, "Không được sửa mã lớp!!!");
								return;
							}
							else
							{
								if(dao.update(lop))
								{
									dsLop.set(index, lop);
									model.setRowCount(0);
									for(Lop l:dsLop)
									{
										Object[] o = {l.getMalop(),l.getTenlop()};
										model.addRow(o);
									}
									JOptionPane.showMessageDialog(null, "Sửa thành công!!!");
								}
								else
								{
									JOptionPane.showMessageDialog(null, "Sửa thất bại!!!");
								}
							}
						}
						catch (Exception e1) 
						{
							JOptionPane.showMessageDialog(null, "Không được sửa mã lớp!!!");
						}
					}
					else
					{
						JOptionPane.showMessageDialog(null, "Vui lòng chọn lớp cần sửa!!!");
					}
				}
			});
			btnSua.setBounds(156, 91, 97, 25);
		}
		return btnSua;
	}
	private JButton getBtnXoa() {
		if (btnXoa == null) {
			btnXoa = new JButton("X\u00F3a");
			btnXoa.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) 
				{
					int index = table.getSelectedRow();
					if(index != -1)
					{
						Lop lop = dsLop.get(index);
						if(lop.getMalop()==Integer.parseInt(txtMaLop.getText()))
						{
							if(dao.delete(lop.getMalop()))
							{
								dsLop.remove(index);
								model.removeRow(index);
								JOptionPane.showMessageDialog(null, "Xóa thành công!!!");
							}
							else
							{
								JOptionPane.showMessageDialog(null, "Lớp có SV không thể xóa!!!");
							}
						}
						else
						{
							JOptionPane.showMessageDialog(null, "Lớp vừa chọn và mã lớp không trùng nhau!!!");
						}
					}
					else
					{
						JOptionPane.showMessageDialog(null, "Vui lòng chọn lớp cần xóa!!!");
					}
				}
			});
			btnXoa.setBounds(299, 91, 97, 25);
		}
		return btnXoa;
	}
	private JScrollPane getScrollPane() {
		if (scrollPane == null) {
			scrollPane = new JScrollPane();
			scrollPane.setBounds(20, 141, 375, 99);
			scrollPane.setViewportView(getTable());
		}
		return scrollPane;
	}
	private JTable getTable() {
		if (table == null) {
			table = new JTable();
			table.addMouseListener(new MouseAdapter() {
				@Override
				public void mouseClicked(MouseEvent arg0) {
					int index = table.getSelectedRow();
					if(index != -1)
					{
						Lop lop = dsLop.get(index);
						txtMaLop.setText(""+lop.getMalop());
						txtTenLop.setText(lop.getTenlop());
					}
				}
			});
		}
		return table;
	}
}
